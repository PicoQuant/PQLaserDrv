function [methodinfo,structs,enuminfo]=mHeader_Sepia2_Lib
%MHEADER Create structures to define interfaces found in 'Sepia2_Lib'.

%This function was generated by loadlibrary.m parser version 1.1.6.17 on Wed Oct  7 18:06:27 2015
%perl options:'Sepia2_Lib.i -outfile=mHeader.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
structs=[];enuminfo=[];fcnNum=1;
% extern int _stdcall SEPIA2_LIB_DecodeError ( int iErrCode , char * cErrorString );
fcns.name{fcnNum}='SEPIA2_LIB_DecodeError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_LIB_GetVersion ( char * cLibVersion ); 
fcns.name{fcnNum}='SEPIA2_LIB_GetVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_LIB_IsRunningOnWine ( unsigned char * pbIsRunningOnWine ); 
fcns.name{fcnNum}='SEPIA2_LIB_IsRunningOnWine'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_USB_OpenDevice ( int iDevIdx , char * cProductModel , char * cSerialNumber ); 
fcns.name{fcnNum}='SEPIA2_USB_OpenDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_USB_OpenGetSerNumAndClose ( int iDevIdx , char * cProductModel , char * cSerialNumber ); 
fcns.name{fcnNum}='SEPIA2_USB_OpenGetSerNumAndClose'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_USB_GetStrDescriptor ( int iDevIdx , char * cDescriptor ); 
fcns.name{fcnNum}='SEPIA2_USB_GetStrDescriptor'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_USB_CloseDevice ( int iDevIdx ); 
fcns.name{fcnNum}='SEPIA2_USB_CloseDevice'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_DecodeErrPhaseName ( int iErrPhase , char * cErrorPhase ); 
fcns.name{fcnNum}='SEPIA2_FWR_DecodeErrPhaseName'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetVersion ( int iDevIdx , char * cFWVersion ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetLastError ( int iDevIdx , int * piErrCode , int * piPhase , int * piLocation , int * piSlot , char * cCondition ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetLastError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetWorkingMode ( int iDevIdx , int * piMode ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetWorkingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_SetWorkingMode ( int iDevIdx , int iMode ); 
fcns.name{fcnNum}='SEPIA2_FWR_SetWorkingMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_RollBackToPermanentValues ( int iDevIdx ); 
fcns.name{fcnNum}='SEPIA2_FWR_RollBackToPermanentValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_StoreAsPermanentValues ( int iDevIdx ); 
fcns.name{fcnNum}='SEPIA2_FWR_StoreAsPermanentValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetModuleMap ( int iDevIdx , int iPerformRestart , int * piModuleCount ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetModuleMap'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetModuleInfoByMapIdx ( int iDevIdx , int iMapIdx , int * piSlotId , unsigned char * pbIsPrimary , unsigned char * pbIsBackPlane , unsigned char * pbHasUptimeCounter ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetModuleInfoByMapIdx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_GetUptimeInfoByMapIdx ( int iDevIdx , int iMapIdx , unsigned long * pulMainPowerUp , unsigned long * pulActivePowerUp , unsigned long * pulScaledPowerUp ); 
fcns.name{fcnNum}='SEPIA2_FWR_GetUptimeInfoByMapIdx'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_CreateSupportRequestText ( int iDevIdx , char * cPreamble , char * cCallingSW , int iOptions , int iBufferLen , char * cBuffer ); 
fcns.name{fcnNum}='SEPIA2_FWR_CreateSupportRequestText'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'voidPtr', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_FWR_FreeModuleMap ( int iDevIdx ); 
fcns.name{fcnNum}='SEPIA2_FWR_FreeModuleMap'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_DecodeModuleType ( int iModuleType , char * cModulType ); 
fcns.name{fcnNum}='SEPIA2_COM_DecodeModuleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_DecodeModuleTypeAbbr ( int iModuleType , char * cModulTypeAbbr ); 
fcns.name{fcnNum}='SEPIA2_COM_DecodeModuleTypeAbbr'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_GetModuleType ( int iDevIdx , int iSlotId , int iGetPrimary , int * piModuleType ); 
fcns.name{fcnNum}='SEPIA2_COM_GetModuleType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_HasSecondaryModule ( int iDevIdx , int iSlotId , int * piHasSecondary ); 
fcns.name{fcnNum}='SEPIA2_COM_HasSecondaryModule'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_GetSerialNumber ( int iDevIdx , int iSlotId , int iGetPrimary , char * cSerialNumber ); 
fcns.name{fcnNum}='SEPIA2_COM_GetSerialNumber'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_GetSupplementaryInfos ( int iDevIdx , int iSlotId , int iGetPrimary , char * cLabel , char * cReleaseDate , char * cRevision , char * cHdrMemo ); 
fcns.name{fcnNum}='SEPIA2_COM_GetSupplementaryInfos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring', 'cstring', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_GetPresetInfo ( int iDevIdx , int iSlotId , int iGetPrimary , int iPresetNr , unsigned char * pbIsSet , char * cPresetMemo ); 
fcns.name{fcnNum}='SEPIA2_COM_GetPresetInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'uint8Ptr', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_RecallPreset ( int iDevIdx , int iSlotId , int iGetPrimary , int iPresetNr ); 
fcns.name{fcnNum}='SEPIA2_COM_RecallPreset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_SaveAsPreset ( int iDevIdx , int iSlotId , int iSetPrimary , int iPresetNr , char * cPresetMemo ); 
fcns.name{fcnNum}='SEPIA2_COM_SaveAsPreset'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_IsWritableModule ( int iDevIdx , int iSlotId , int iGetPrimary , unsigned char * pbIsWritable ); 
fcns.name{fcnNum}='SEPIA2_COM_IsWritableModule'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_COM_UpdateModuleData ( int iDevIdx , int iSlotId , int iSetPrimary , char * pcDCLFileName ); 
fcns.name{fcnNum}='SEPIA2_COM_UpdateModuleData'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SCM_GetPowerAndLaserLEDS ( int iDevIdx , int iSlotId , unsigned char * pbPowerLED , unsigned char * pbLaserActiveLED ); 
fcns.name{fcnNum}='SEPIA2_SCM_GetPowerAndLaserLEDS'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SCM_GetLaserLocked ( int iDevIdx , int iSlotId , unsigned char * pbLocked ); 
fcns.name{fcnNum}='SEPIA2_SCM_GetLaserLocked'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SCM_GetLaserSoftLock ( int iDevIdx , int iSlotId , unsigned char * pbSoftLocked ); 
fcns.name{fcnNum}='SEPIA2_SCM_GetLaserSoftLock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SCM_SetLaserSoftLock ( int iDevIdx , int iSlotId , unsigned char bSoftLocked ); 
fcns.name{fcnNum}='SEPIA2_SCM_SetLaserSoftLock'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_DecodeFreqTrigMode ( int iFreq , char * cFreqTrigMode ); 
fcns.name{fcnNum}='SEPIA2_SLM_DecodeFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_DecodeHeadType ( int iHeadType , char * cHeadType ); 
fcns.name{fcnNum}='SEPIA2_SLM_DecodeHeadType'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_GetIntensityFineStep ( int iDevIdx , int iSlotId , unsigned short * pwIntensity ); 
fcns.name{fcnNum}='SEPIA2_SLM_GetIntensityFineStep'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_SetIntensityFineStep ( int iDevIdx , int iSlotId , unsigned short wIntensity ); 
fcns.name{fcnNum}='SEPIA2_SLM_SetIntensityFineStep'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_GetPulseParameters ( int iDevIdx , int iSlotId , int * piFreq , unsigned char * pbPulseMode , int * piHeadType ); 
fcns.name{fcnNum}='SEPIA2_SLM_GetPulseParameters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'uint8Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SLM_SetPulseParameters ( int iDevIdx , int iSlotId , int iFreq , unsigned char bPulseMode ); 
fcns.name{fcnNum}='SEPIA2_SLM_SetPulseParameters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_DecodeFreqTrigMode ( int iDevIdx , int iSlotId , int iFreqTrigMode , char * cFreqTrigMode ); 
fcns.name{fcnNum}='SEPIA2_SOM_DecodeFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetFreqTrigMode ( int iDevIdx , int iSlotId , int * piFreqTrigMode ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetFreqTrigMode ( int iDevIdx , int iSlotId , int iFreqTrigMode ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetTriggerRange ( int iDevIdx , int iSlotId , int * piMilliVoltLow , int * piMilliVoltHigh ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetTriggerRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetTriggerLevel ( int iDevIdx , int iSlotId , int * piMilliVolt ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetTriggerLevel ( int iDevIdx , int iSlotId , int iMilliVolt ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetBurstValues ( int iDevIdx , int iSlotId , unsigned char * pbDivider , unsigned char * pbPreSync , unsigned char * pbMaskSync ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetBurstValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetBurstValues ( int iDevIdx , int iSlotId , unsigned char bDivider , unsigned char bPreSync , unsigned char bMaskSync ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetBurstValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetBurstLengthArray ( int iDevIdx , int iSlotId , long * plBurstLen1 , long * plBurstLen2 , long * plBurstLen3 , long * plBurstLen4 , long * plBurstLen5 , long * plBurstLen6 , long * plBurstLen7 , long * plBurstLen8 ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetBurstLengthArray'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetBurstLengthArray ( int iDevIdx , int iSlotId , long lBurstLen1 , long lBurstLen2 , long lBurstLen3 , long lBurstLen4 , long lBurstLen5 , long lBurstLen6 , long lBurstLen7 , long lBurstLen8 ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetBurstLengthArray'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetOutNSyncEnable ( int iDevIdx , int iSlotId , unsigned char * pbOutEnable , unsigned char * pbSyncEnable , unsigned char * pbSyncInverse ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetOutNSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetOutNSyncEnable ( int iDevIdx , int iSlotId , unsigned char bOutEnable , unsigned char bSyncEnable , unsigned char bSyncInverse ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetOutNSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_DecodeAUXINSequencerCtrl ( int iAUXInCtrl , char * cSequencerCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOM_DecodeAUXINSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_GetAUXIOSequencerCtrl ( int iDevIdx , int iSlotId , unsigned char * pbAUXOutCtrl , unsigned char * pbAUXInCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOM_GetAUXIOSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOM_SetAUXIOSequencerCtrl ( int iDevIdx , int iSlotId , unsigned char bAUXOutCtrl , unsigned char bAUXInCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOM_SetAUXIOSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_DecodeFreqTrigMode ( int iDevIdx , int iSlotId , int iFreqTrigIdx , char * cFreqTrigMode ); 
fcns.name{fcnNum}='SEPIA2_SOMD_DecodeFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetFreqTrigMode ( int iDevIdx , int iSlotId , int * piFreqTrigIdx , unsigned char * pbSynchronize ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetFreqTrigMode ( int iDevIdx , int iSlotId , int iFreqTrigIdx , unsigned char bSynchronize ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetFreqTrigMode'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetTriggerRange ( int iDevIdx , int iSlotId , int * piMilliVoltLow , int * piMilliVoltHigh ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetTriggerRange'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetTriggerLevel ( int iDevIdx , int iSlotId , int * piMilliVolt ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetTriggerLevel ( int iDevIdx , int iSlotId , int iMilliVolt ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetTriggerLevel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetBurstValues ( int iDevIdx , int iSlotId , unsigned short * pwDivider , unsigned char * pbPreSync , unsigned char * pbMaskSync ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetBurstValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetBurstValues ( int iDevIdx , int iSlotId , unsigned short wDivider , unsigned char bPreSync , unsigned char bMaskSync ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetBurstValues'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetBurstLengthArray ( int iDevIdx , int iSlotId , long * plBurstLen1 , long * plBurstLen2 , long * plBurstLen3 , long * plBurstLen4 , long * plBurstLen5 , long * plBurstLen6 , long * plBurstLen7 , long * plBurstLen8 ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetBurstLengthArray'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetBurstLengthArray ( int iDevIdx , int iSlotId , long lBurstLen1 , long lBurstLen2 , long lBurstLen3 , long lBurstLen4 , long lBurstLen5 , long lBurstLen6 , long lBurstLen7 , long lBurstLen8 ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetBurstLengthArray'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetOutNSyncEnable ( int iDevIdx , int iSlotId , unsigned char * pbOutEnable , unsigned char * pbSyncEnable , unsigned char * pbSyncInverse ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetOutNSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetOutNSyncEnable ( int iDevIdx , int iSlotId , unsigned char bOutEnable , unsigned char bSyncEnable , unsigned char bSyncInverse ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetOutNSyncEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_DecodeAUXINSequencerCtrl ( int iAUXInCtrl , char * cSequencerCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOMD_DecodeAUXINSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetAUXIOSequencerCtrl ( int iDevIdx , int iSlotId , unsigned char * pbAUXOutCtrl , unsigned char * pbAUXInCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetAUXIOSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetAUXIOSequencerCtrl ( int iDevIdx , int iSlotId , unsigned char bAUXOutCtrl , unsigned char bAUXInCtrl ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetAUXIOSequencerCtrl'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetSeqOutputInfos ( int iDevIdx , int iSlotId , unsigned char bSeqOutIdx , unsigned char * pbDelayed , unsigned char * pbForcedUndelayed , unsigned char * pbOutCombi , unsigned char * pbMaskedCombi , double * pf64CoarseDly , unsigned char * pbFineDly ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetSeqOutputInfos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'uint8Ptr', 'doublePtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SetSeqOutputInfos ( int iDevIdx , int iSlotId , unsigned char bSeqOutIdx , unsigned char bDelayed , unsigned char bOutCombi , unsigned char bMaskedCombi , double fCoarseDly , unsigned char bFineDly ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SetSeqOutputInfos'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8', 'uint8', 'uint8', 'uint8', 'double', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_SynchronizeNow ( int iDevIdx , int iSlotId ); 
fcns.name{fcnNum}='SEPIA2_SOMD_SynchronizeNow'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_DecodeModuleState ( unsigned short wState , char * cStatusText ); 
fcns.name{fcnNum}='SEPIA2_SOMD_DecodeModuleState'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint16', 'cstring'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetStatusError ( int iDevIdx , int iSlotId , unsigned short * pwState , short * piErrorCode ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetStatusError'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr', 'int16Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetTrigSyncFreq ( int iDevIdx , int iSlotId , unsigned char * pbFreqStable , unsigned long * pulTrigSyncFreq ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetTrigSyncFreq'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetDelayUnits ( int iDevIdx , int iSlotId , double * pfCoarseDlyStep , unsigned char * pbFineDlyStepCount ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetDelayUnits'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'doublePtr', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetFWVersion ( int iDevIdx , int iSlotId , unsigned long * pulFWVersion ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetFWVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_FWReadPage ( int iDevIdx , int iSlotId , unsigned short iPageIdx , unsigned char * pbFWPage ); 
fcns.name{fcnNum}='SEPIA2_SOMD_FWReadPage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_FWWritePage ( int iDevIdx , int iSlotId , unsigned short iPageIdx , unsigned char * pbFWPage ); 
fcns.name{fcnNum}='SEPIA2_SOMD_FWWritePage'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16', 'uint8Ptr'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_Calibrate ( int iDevIdx , int iSlotId , unsigned char bCalParam ); 
fcns.name{fcnNum}='SEPIA2_SOMD_Calibrate'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint8'};fcnNum=fcnNum+1;
% extern int _stdcall SEPIA2_SOMD_GetHWParams ( int iDevIdx , int iSlotId , unsigned short * pwHWParTemp1 , unsigned short * pwHWParTemp2 , unsigned short * pwHWParTemp3 , unsigned short * pwHWParVolt1 , unsigned short * pwHWParVolt2 , unsigned short * pwHWParVolt3 , unsigned short * pwHWParVolt4 , unsigned short * pwHWParAUX ); 
fcns.name{fcnNum}='SEPIA2_SOMD_GetHWParams'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'int32', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr', 'uint16Ptr'};
methodinfo=fcns;